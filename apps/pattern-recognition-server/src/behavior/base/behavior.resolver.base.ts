/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Behavior } from "./Behavior";
import { BehaviorCountArgs } from "./BehaviorCountArgs";
import { BehaviorFindManyArgs } from "./BehaviorFindManyArgs";
import { BehaviorFindUniqueArgs } from "./BehaviorFindUniqueArgs";
import { CreateBehaviorArgs } from "./CreateBehaviorArgs";
import { UpdateBehaviorArgs } from "./UpdateBehaviorArgs";
import { DeleteBehaviorArgs } from "./DeleteBehaviorArgs";
import { Patient } from "../../patient/base/Patient";
import { BehaviorService } from "../behavior.service";
@graphql.Resolver(() => Behavior)
export class BehaviorResolverBase {
  constructor(protected readonly service: BehaviorService) {}

  async _behaviorsMeta(
    @graphql.Args() args: BehaviorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Behavior])
  async behaviors(
    @graphql.Args() args: BehaviorFindManyArgs
  ): Promise<Behavior[]> {
    return this.service.behaviors(args);
  }

  @graphql.Query(() => Behavior, { nullable: true })
  async behavior(
    @graphql.Args() args: BehaviorFindUniqueArgs
  ): Promise<Behavior | null> {
    const result = await this.service.behavior(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Behavior)
  async createBehavior(
    @graphql.Args() args: CreateBehaviorArgs
  ): Promise<Behavior> {
    return await this.service.createBehavior({
      ...args,
      data: {
        ...args.data,

        patient: args.data.patient
          ? {
              connect: args.data.patient,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Behavior)
  async updateBehavior(
    @graphql.Args() args: UpdateBehaviorArgs
  ): Promise<Behavior | null> {
    try {
      return await this.service.updateBehavior({
        ...args,
        data: {
          ...args.data,

          patient: args.data.patient
            ? {
                connect: args.data.patient,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Behavior)
  async deleteBehavior(
    @graphql.Args() args: DeleteBehaviorArgs
  ): Promise<Behavior | null> {
    try {
      return await this.service.deleteBehavior(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patient",
  })
  async getPatient(
    @graphql.Parent() parent: Behavior
  ): Promise<Patient | null> {
    const result = await this.service.getPatient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
