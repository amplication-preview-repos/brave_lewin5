/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BehaviorService } from "../behavior.service";
import { BehaviorCreateInput } from "./BehaviorCreateInput";
import { Behavior } from "./Behavior";
import { BehaviorFindManyArgs } from "./BehaviorFindManyArgs";
import { BehaviorWhereUniqueInput } from "./BehaviorWhereUniqueInput";
import { BehaviorUpdateInput } from "./BehaviorUpdateInput";

export class BehaviorControllerBase {
  constructor(protected readonly service: BehaviorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Behavior })
  async createBehavior(
    @common.Body() data: BehaviorCreateInput
  ): Promise<Behavior> {
    return await this.service.createBehavior({
      data: {
        ...data,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        occurredAt: true,

        patient: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Behavior] })
  @ApiNestedQuery(BehaviorFindManyArgs)
  async behaviors(@common.Req() request: Request): Promise<Behavior[]> {
    const args = plainToClass(BehaviorFindManyArgs, request.query);
    return this.service.behaviors({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        occurredAt: true,

        patient: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Behavior })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async behavior(
    @common.Param() params: BehaviorWhereUniqueInput
  ): Promise<Behavior | null> {
    const result = await this.service.behavior({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        occurredAt: true,

        patient: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Behavior })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBehavior(
    @common.Param() params: BehaviorWhereUniqueInput,
    @common.Body() data: BehaviorUpdateInput
  ): Promise<Behavior | null> {
    try {
      return await this.service.updateBehavior({
        where: params,
        data: {
          ...data,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          occurredAt: true,

          patient: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Behavior })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBehavior(
    @common.Param() params: BehaviorWhereUniqueInput
  ): Promise<Behavior | null> {
    try {
      return await this.service.deleteBehavior({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          occurredAt: true,

          patient: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
