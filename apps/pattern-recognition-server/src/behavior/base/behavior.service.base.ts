/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Behavior as PrismaBehavior,
  Patient as PrismaPatient,
} from "@prisma/client";

export class BehaviorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BehaviorCountArgs, "select">): Promise<number> {
    return this.prisma.behavior.count(args);
  }

  async behaviors(
    args: Prisma.BehaviorFindManyArgs
  ): Promise<PrismaBehavior[]> {
    return this.prisma.behavior.findMany(args);
  }
  async behavior(
    args: Prisma.BehaviorFindUniqueArgs
  ): Promise<PrismaBehavior | null> {
    return this.prisma.behavior.findUnique(args);
  }
  async createBehavior(
    args: Prisma.BehaviorCreateArgs
  ): Promise<PrismaBehavior> {
    return this.prisma.behavior.create(args);
  }
  async updateBehavior(
    args: Prisma.BehaviorUpdateArgs
  ): Promise<PrismaBehavior> {
    return this.prisma.behavior.update(args);
  }
  async deleteBehavior(
    args: Prisma.BehaviorDeleteArgs
  ): Promise<PrismaBehavior> {
    return this.prisma.behavior.delete(args);
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.behavior
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
}
